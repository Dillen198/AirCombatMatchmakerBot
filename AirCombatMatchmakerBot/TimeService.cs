using System.Text.Json;

public static class TimeService
{
    private const string TimeApiUrl = "http://worldtimeapi.org/api/timezone/etc/utc";

    public static async Task<DateTime> GetCurrentTime()
    {
        try
        {
            using (var httpClient = new HttpClient())
            {
                var response = await httpClient.GetAsync(TimeApiUrl);
                if (response.IsSuccessStatusCode)
                {
                    var timeData = await response.Content.ReadAsStringAsync();
                    var apiResponse = JsonSerializer.Deserialize<ApiResponse>(timeData);
                    var currentTime = DateTime.Parse(apiResponse.utc_datetime, null, System.Globalization.DateTimeStyles.RoundtripKind).ToUniversalTime();
                    Log.WriteLine(currentTime.ToString(), LogLevel.VERBOSE);
                    return currentTime;
                }
                else
                {
                    Log.WriteLine("Failed to retrieve current time from the API. Response: " + response.StatusCode, LogLevel.CRITICAL);
                    throw new InvalidOperationException("Failed to retrieve current time from the API.");
                }
            }
        }
        catch (Exception ex)
        {
            Log.WriteLine("An error occurred while retrieving the current time from the API: " + ex.Message, LogLevel.CRITICAL);
            throw;
        }
    }

    public static ulong CalculateTimeUntilWithUnixTime(ulong _timeUntil)
    {
        ulong timeDiff = _timeUntil - (ulong)DateTimeOffset.Now.ToUnixTimeSeconds();
        return timeDiff;
    }

    public static DateTime ConvertToDateTimeFromUnixTime(ulong unixTime)
    {
        DateTime unixEpoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
        return unixEpoch.AddSeconds(unixTime);
    }

    // Second iteration generated by the GPT
    public static string ReturnTimeLeftAsStringFromTheTimeTheActionWillTakePlace(ulong _time)
    {
        var timeLeft = _time - (ulong)DateTimeOffset.Now.ToUnixTimeSeconds();

        if (timeLeft <= 0)
        {
            // If the time has already expired
            return "Expired";
        }
        else if (timeLeft <= 59)
        {
            // If the time is less than or equal to 59 seconds
            return $"{timeLeft} second{(timeLeft > 1 ? "s" : "")}";
        }
        else if (timeLeft <= 20 * 60)
        {
            // If the time is less than or equal to 20 minutes
            var minutes = timeLeft / 60;
            var seconds = timeLeft % 60;
            return $"{minutes} minute{(minutes > 1 ? "s" : "")} {seconds} second{(seconds > 1 ? "s" : "")}";
        }
        else if (timeLeft <= 24 * 60 * 60)
        {
            // If the time is less than or equal to 24 hours
            var hours = timeLeft / (60 * 60);
            var minutes = (timeLeft % (60 * 60)) / 60;

            if (hours > 0)
            {
                if (minutes > 0)
                {
                    return $"{hours} hour{(hours > 1 ? "s" : "")} {minutes} minute{(minutes > 1 ? "s" : "")}";
                }

                return $"{hours} hour{(hours > 1 ? "s" : "")}";
            }

            return $"{minutes} minute{(minutes > 1 ? "s" : "")}";
        }
        else if (timeLeft <= 7 * 24 * 60 * 60)
        {
            // If the time is less than or equal to 7 days
            var days = timeLeft / (24 * 60 * 60);
            var hours = (timeLeft % (24 * 60 * 60)) / (60 * 60);
            var minutes = (timeLeft % (60 * 60)) / 60;
            var timeLeftString = "";

            if (days > 0)
            {
                timeLeftString += $"{days} day{(days > 1 ? "s" : "")} ";
            }

            if (hours > 0)
            {
                timeLeftString += $"{hours} hour{(hours > 1 ? "s" : "")} ";
            }

            if (hours == 0)
            {
                timeLeftString += $"{minutes} minute{(minutes > 1 ? "s" : "")}";
            }

            return timeLeftString;
        }
        else
        {
            // For times more than 7 days
            var days = timeLeft / (24 * 60 * 60);
            var hours = (timeLeft % (24 * 60 * 60)) / (60 * 60);
            var timeLeftString = "";

            if (days > 0)
            {
                timeLeftString += $"{days} day{(days > 1 ? "s" : "")} ";
            }

            if (hours > 0)
            {
                timeLeftString += $"{hours} hour{(hours > 1 ? "s" : "")}";
            }

            return timeLeftString;
        }
    }



    public class ApiResponse
    {
        public string utc_datetime { get; set; }
    }
}
